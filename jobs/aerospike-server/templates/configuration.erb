# Configuration template
# Aerospike database configuration file.

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  my_ip = discover_external_ip
%>

# This stanza must come first.
service {
    user vcap
    group vcap
    run-as-daemon true
    paxos-single-replica-limit <%= p("service.paxos_single_replica_limit") %>
    pidfile <%= properties.run.dir %>/aerospike-server.pid
    service-threads <%= p("service.service_threads") %>
    transaction-queues <%= p("service.transaction_queues") %>
    transaction-threads-per-queue <%= p("service.transaction_threads_per_queue") %>
    proto-fd-max <%= p("service.proto_fd_max") %>
    work-directory <%= properties.store.dir %>
}

logging {
    file <%= properties.log.dir %>/aerospike.log {
        context any info
    }
}

mod-lua {
  system-path <%= properties.store.dir %>/sys/udf/lua
  user-path <%= properties.store.dir %>/usr/udf/lua
}

<% if p("service.license_type") == "enterprise" %>
security {
    enable-security true
}
<% end %>

network {
    service {
        address any
        port <%= p("service_network.service_port") %>
    }

    heartbeat {
        mode mesh
        address <%= my_ip%>
        port <%= p("service_network.heartbeat_port") %>
        <%
        if_link("aerospike-server") do |aerospike_servers|
           aerospike_servers.instances.map do |instance| 
        %>
            mesh-seed-address-port <%="#{instance.address}"%> <%= p("service_network.heartbeat_port") %>
        <%
           end
        end
        %>
        interval <%= p("service_network.heartbeat_interval") %>
        timeout <%= p("service_network.heartbeat_timeout") %>
    }

    fabric {
        port <%= p("service_network.fabric_port") %>
    }

    info {
        port <%= p("service_network.info_port") %>
    }
}

namespace <%= p("namespace_name") %> {
	replication-factor <%= p("namespace_replication_factor") %>
	memory-size <%= p("namespace_size") %>
	default-ttl <%= p("namespace_default_ttl") %>
    <% if p("namespace_storage_type") == "device" %>
    storage-engine device { 
        file <%= properties.store.dir %>/<%= p("namespace_name") %>.dat
        filesize <%= p("namespace_filesize") %>
        data-in-memory <%= p("namespace_data_in_memory") %>
    }
    <% else %>
    storage-engine memory
    <% end %>
}


